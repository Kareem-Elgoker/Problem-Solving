struct MergeSortTree
{
    int tree_size;

    // change the data type suitable for the problem only for the seg_data.first
    vector<vector<pair<int, pair<int, int>>>> seg_data;

    MergeSortTree(int n)
    {
        tree_size = 1;
        while (tree_size < n) tree_size <<= 1;
        seg_data.resize(tree_size << 1);
    }

    void merge(int ni, int lf, int ri)
    {
        int l = 0, r = 0, n = seg_data[lf].size(), m = seg_data[ri].size(), k = 0;
        seg_data[ni].resize(n + m);

        while(l < n && r < m) {
            if(seg_data[lf][l].first < seg_data[ri][r].first)
                seg_data[ni][k++] = {seg_data[lf][l].first, {l++, r - 1}};
            else
                seg_data[ni][k++] = {seg_data[ri][r].first, {l - 1, r++}};
        }

        while(l < n)
            seg_data[ni][k++] = {seg_data[lf][l].first, {l++, r - 1}};
        while(r < m)
            seg_data[ni][k++] = {seg_data[ri][r].first, {l - 1, r++}};
    }

    void init(vector<int> & nums, int ni, int lx, int rx)
    {
        if(rx - lx == 1)
        {
            if(lx < (int)nums.size())
                seg_data[ni] = {{nums[lx], {-1, -1}}};
            return;
        }

        int mid = (lx + rx) >> 1;
        init(nums, (ni << 1) + 1, lx, mid);
        init(nums, (ni << 1) + 2, mid, rx);

        merge(ni, (ni << 1) + 1, (ni << 1) + 2);
    }
    void init(vector<int> & nums)
    {
        init(nums, 0, 0, tree_size);
    }

    int less_equal(int l, int r, int ni, int lx, int rx, int pos)
    {
        if(pos == -1)
            return 0;

        if(lx >= l && rx <= r)
        {
            return pos + 1;
        }
        if(lx >= r || rx <= l)
            return 0;

        int mid = (lx + rx) >> 1;

        int ans = less_equal(l, r, (ni << 1) + 1, lx, mid, seg_data[ni][pos].second.first);
        ans += less_equal(l, r, (ni << 1) + 2, mid, rx, seg_data[ni][pos].second.second);

        return ans;
    }

    // any query is zero indexed range and get the answer from l to r-1, i.e [l,r)

    int less_equal(int l, int r, int x)
    {
        auto it = upper_bound(seg_data[0].begin(), seg_data[0].end(), make_pair(x, make_pair(tree_size, tree_size)));
        int ans = 0;
        if(it != seg_data[0].begin()) {
            --it;
            ans = less_equal(l, r, 0, 0, tree_size, it - seg_data[0].begin());
        }
        return ans;
    }

    int less(int l, int r, int x)
    {
        return less_equal(l, r, x - 1);
    }

    int equal(int l, int r, int x)
    {
        int ans = less_equal(l, r, x);
        ans -= less_equal(l, r, x - 1);
        return ans;
    }

    int greater(int l, int r, int x)
    {
        return (r - l) - less_equal(l, r, x);
    }

    int greater_equal(int l, int r, int x)
    {
        return (r - l) - less_equal(l, r, x - 1);
    }
};
