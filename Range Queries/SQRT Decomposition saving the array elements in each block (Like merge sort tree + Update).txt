vector<int> arr;
vector<vector<int>> sqrt_decomposition;

int sq;

void build()
{
    int n = arr.size();
    sq = ceil(sqrt(n));

    sqrt_decomposition.assign(sq, {});

    for (int i = 0; i < n; ++i) {
        sqrt_decomposition[i / sq].push_back(arr[i]);
    }

    for(auto & SD : sqrt_decomposition) sort(SD.begin(), SD.end());
}

int query(int l, int r, int v) // 0 indexed range
{
    int ans = 0;
    while (l % sq && l <= r) {
        /* check every arr[l] alone*/
        l++;
    }
    while (l + sq - 1 <= r) {
        /* check the block i and get answer from it */
        l += sq;
    }
    while (l <= r) {
        /* check every arr[l] alone*/
        l++;
    }

    return ans;
}

void update(int idx, long long val) // 0 indexed
{
    vector<int> &SD = sqrt_decomposition[idx / sq];
    SD[lower_bound(SD.begin(), SD.end(), arr[idx]) - SD.begin()] = val;
    arr[idx] = val;

    for (int i = 0; i < SD.size() - 1; ++i) {
        if(SD[i] > SD[i + 1]) swap(SD[i], SD[i + 1]);
    }
    for (int i = SD.size() - 1; i > 0; --i) {
        if(SD[i] < SD[i - 1]) swap(SD[i], SD[i - 1]);
    }
}